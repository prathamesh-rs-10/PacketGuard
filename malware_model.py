import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import OneHotEncoder
import joblib

# Load the dataset
dataset = pd.read_csv('malware_dataset.csv')

# Drop rows with missing values if any
dataset.dropna(inplace=True)

# Separate features and target column
X = dataset.drop('Label', axis=1)  # Features
y = dataset['Label']  # Target column

# Perform one-hot encoding for all categorical columns
categorical_cols = X.select_dtypes(include=['object']).columns
encoder = OneHotEncoder(drop='first')  # Setting drop='first' to avoid multicollinearity
X_encoded = encoder.fit_transform(X[categorical_cols])
X_encoded = pd.DataFrame(X_encoded.toarray(), columns=encoder.get_feature_names_out(categorical_cols))
X.drop(columns=categorical_cols, inplace=True)

# Concatenate the one-hot encoded features with the original features
X_encoded.reset_index(drop=True, inplace=True)
X.reset_index(drop=True, inplace=True)
X_encoded = pd.concat([X_encoded, X.reset_index(drop=True)], axis=1)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_encoded, y, test_size=0.2, random_state=42)

# Initialize Decision Tree Classifier
clf = DecisionTreeClassifier()

# Train the classifier
clf.fit(X_train, y_train)

# Predictions
y_pred = clf.predict(X_test)

# Print column names of X_test for debugging
print("Column names of X_test:", X_test.columns)

# Find and print malicious packets
print("Malicious Packets:")
for i in range(len(X_test)):
    if y_pred[i] == 'malicious':
        print("Row:", X_test.iloc[i])  # Print the entire row for debugging
        print()

# Save the model to a file
joblib.dump(clf, 'malware_detection_model.pkl')